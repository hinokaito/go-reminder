2つの重要な記号: &と*


&: アドレス取得演算子(address-of operator)
変数の前に & をつけると、その変数のメモリアドレス(ポインタ)を取得できます。
「～の住所」と読み替えるよ分かりやすいです。
例：
x := 10
print(&x) // 変数xのポインタ


*: 間接参照演算子
ポインタ変数の前に * を付けると、そのポインタが指し示すアドレスに格納されている値そのものにアクセスできます。
「その住所にある家の中身」と読み替えることができます
例：
x := 10             // 変数xを定義 
var ptr *int = &x   // 変数ptrに変数xのアドレス(12345など)を*int型として定義
*ptr = 100          // ptrに格納されたアドレス12345の中身、x = 10を100に変更